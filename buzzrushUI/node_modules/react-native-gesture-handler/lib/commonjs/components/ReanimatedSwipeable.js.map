{"version":3,"sources":["ReanimatedSwipeable.tsx"],"names":["DRAG_TOSS","SwipeDirection","Swipeable","props","ref","defaultProps","friction","overshootFriction","dragOffset","enableTrackpadTwoFingerGesture","leftThreshold","rightThreshold","enabled","containerStyle","childrenContainerStyle","animationOptions","overshootLeft","overshootRight","testID","children","dragOffsetFromLeftEdge","dragOffsetFromRightEdge","onSwipeableOpenStartDrag","onSwipeableCloseStartDrag","onSwipeableWillOpen","onSwipeableWillClose","onSwipeableOpen","onSwipeableClose","renderLeftActions","renderRightActions","remainingProps","rowState","userDrag","appliedTranslation","rowWidth","leftWidth","rightWidth","showLeftProgress","showRightProgress","updateAnimatedEvent","shouldOvershootLeft","value","shouldOvershootRight","startOffset","offsetDrag","dispatchImmediateEvents","fromValue","toValue","RIGHT","LEFT","dispatchEndEvents","animateRow","velocityX","translationSpringConfig","mass","damping","stiffness","velocity","overshootClamping","reduceMotion","ReduceMotion","System","isClosing","moveToRight","usedWidth","progressSpringConfig","restDisplacementThreshold","restSpeedThreshold","frozenRowState","isFinished","progressTarget","Math","sign","max","leftLayoutRef","leftWrapperLayoutRef","rightLayoutRef","updateElementWidths","leftLayout","leftWrapperLayout","rightLayout","pageX","swipeableMethods","close","_WORKLET","openLeft","openRight","reset","onRowLayout","nativeEvent","layout","width","leftActionAnimation","opacity","leftElement","styles","leftActions","rightActionAnimation","rightElement","rightActions","handleRelease","event","translationX","leftThresholdProp","rightThresholdProp","dragStarted","tapGesture","Gesture","Tap","shouldCancelWhenOutside","onStart","panGesture","Pan","activeOffsetX","onUpdate","direction","onEnd","onFinalize","animatedStyle","transform","translateX","pointerEvents","swipeableComponent","container","StyleSheet","create","overflow","absoluteFillObject","flexDirection","I18nManager","isRTL"],"mappings":"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","sourcesContent":["// Similarily to the DrawerLayout component this deserves to be put in a\n// separate repo. Although, keeping it here for the time being will allow us to\n// move faster and fix possible issues quicker\n\nimport React, {\n  ForwardedRef,\n  forwardRef,\n  useCallback,\n  useImperativeHandle,\n  useMemo,\n} from 'react';\nimport { GestureObjects as Gesture } from '../handlers/gestures/gestureObjects';\nimport { GestureDetector } from '../handlers/gestures/GestureDetector';\nimport {\n  GestureStateChangeEvent,\n  GestureUpdateEvent,\n} from '../handlers/gestureHandlerCommon';\nimport type { PanGestureHandlerProps } from '../handlers/PanGestureHandler';\nimport type { PanGestureHandlerEventPayload } from '../handlers/GestureHandlerEventPayload';\nimport Animated, {\n  ReduceMotion,\n  SharedValue,\n  interpolate,\n  measure,\n  runOnJS,\n  runOnUI,\n  useAnimatedRef,\n  useAnimatedStyle,\n  useSharedValue,\n  withSpring,\n} from 'react-native-reanimated';\nimport {\n  I18nManager,\n  LayoutChangeEvent,\n  StyleProp,\n  StyleSheet,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nconst DRAG_TOSS = 0.05;\n\ntype SwipeableExcludes = Exclude<\n  keyof PanGestureHandlerProps,\n  'onGestureEvent' | 'onHandlerStateChange'\n>;\n\nenum SwipeDirection {\n  LEFT = 'left',\n  RIGHT = 'right',\n}\n\nexport interface SwipeableProps\n  extends Pick<PanGestureHandlerProps, SwipeableExcludes> {\n  /**\n   * Enables two-finger gestures on supported devices, for example iPads with\n   * trackpads. If not enabled the gesture will require click + drag, with\n   * `enableTrackpadTwoFingerGesture` swiping with two fingers will also trigger\n   * the gesture.\n   */\n  enableTrackpadTwoFingerGesture?: boolean;\n\n  /**\n   * Specifies how much the visual interaction will be delayed compared to the\n   * gesture distance. e.g. value of 1 will indicate that the swipeable panel\n   * should exactly follow the gesture, 2 means it is going to be two times\n   * \"slower\".\n   */\n  friction?: number;\n\n  /**\n   * Distance from the left edge at which released panel will animate to the\n   * open state (or the open panel will animate into the closed state). By\n   * default it's a half of the panel's width.\n   */\n  leftThreshold?: number;\n\n  /**\n   * Distance from the right edge at which released panel will animate to the\n   * open state (or the open panel will animate into the closed state). By\n   * default it's a half of the panel's width.\n   */\n  rightThreshold?: number;\n\n  /**\n   * Distance that the panel must be dragged from the left edge to be considered\n   * a swipe. The default value is 10.\n   */\n  dragOffsetFromLeftEdge?: number;\n\n  /**\n   * Distance that the panel must be dragged from the right edge to be considered\n   * a swipe. The default value is 10.\n   */\n  dragOffsetFromRightEdge?: number;\n\n  /**\n   * Value indicating if the swipeable panel can be pulled further than the left\n   * actions panel's width. It is set to true by default as long as the left\n   * panel render method is present.\n   */\n  overshootLeft?: boolean;\n\n  /**\n   * Value indicating if the swipeable panel can be pulled further than the\n   * right actions panel's width. It is set to true by default as long as the\n   * right panel render method is present.\n   */\n  overshootRight?: boolean;\n\n  /**\n   * Specifies how much the visual interaction will be delayed compared to the\n   * gesture distance at overshoot. Default value is 1, it mean no friction, for\n   * a native feel, try 8 or above.\n   */\n  overshootFriction?: number;\n\n  /**\n   * Called when action panel gets open (either right or left).\n   */\n  onSwipeableOpen?: (\n    direction: SwipeDirection.LEFT | SwipeDirection.RIGHT\n  ) => void;\n\n  /**\n   * Called when action panel is closed.\n   */\n  onSwipeableClose?: (\n    direction: SwipeDirection.LEFT | SwipeDirection.RIGHT\n  ) => void;\n\n  /**\n   * Called when action panel starts animating on open (either right or left).\n   */\n  onSwipeableWillOpen?: (\n    direction: SwipeDirection.LEFT | SwipeDirection.RIGHT\n  ) => void;\n\n  /**\n   * Called when action panel starts animating on close.\n   */\n  onSwipeableWillClose?: (\n    direction: SwipeDirection.LEFT | SwipeDirection.RIGHT\n  ) => void;\n\n  /**\n   * Called when action panel starts being shown on dragging to open.\n   */\n  onSwipeableOpenStartDrag?: (\n    direction: SwipeDirection.LEFT | SwipeDirection.RIGHT\n  ) => void;\n\n  /**\n   * Called when action panel starts being shown on dragging to close.\n   */\n  onSwipeableCloseStartDrag?: (\n    direction: SwipeDirection.LEFT | SwipeDirection.RIGHT\n  ) => void;\n\n  /**\n   * `progress`: Equals `0` when `swipeable` is closed, `1` when `swipeable` is opened.\n   *  - When the element overshoots it's opened position the value tends towards `Infinity`.\n   *  - Goes back to `1` when `swipeable` is released.\n   *\n   * `translation`: a horizontal offset of the `swipeable` relative to its closed position.\\\n   * `swipeableMethods`: provides an object exposing methods for controlling the `swipeable`.\n   *\n   * To support `rtl` flexbox layouts use `flexDirection` styling.\n   * */\n  renderLeftActions?: (\n    progress: SharedValue<number>,\n    translation: SharedValue<number>,\n    swipeableMethods: SwipeableMethods\n  ) => React.ReactNode;\n\n  /**\n   * `progress`: Equals `0` when `swipeable` is closed, `1` when `swipeable` is opened.\n   *  - When the element overshoots it's opened position the value tends towards `Infinity`.\n   *  - Goes back to `1` when `swipeable` is released.\n   *\n   * `translation`: a horizontal offset of the `swipeable` relative to its closed position.\\\n   * `swipeableMethods`: provides an object exposing methods for controlling the `swipeable`.\n   *\n   * To support `rtl` flexbox layouts use `flexDirection` styling.\n   * */\n  renderRightActions?: (\n    progress: SharedValue<number>,\n    translation: SharedValue<number>,\n    swipeableMethods: SwipeableMethods\n  ) => React.ReactNode;\n\n  animationOptions?: Record<string, unknown>;\n\n  /**\n   * Style object for the container (`Animated.View`), for example to override\n   * `overflow: 'hidden'`.\n   */\n  containerStyle?: StyleProp<ViewStyle>;\n\n  /**\n   * Style object for the children container (`Animated.View`), for example to\n   * apply `flex: 1`\n   */\n  childrenContainerStyle?: StyleProp<ViewStyle>;\n}\n\nexport interface SwipeableMethods {\n  close: () => void;\n  openLeft: () => void;\n  openRight: () => void;\n  reset: () => void;\n}\n\nconst Swipeable = forwardRef<SwipeableMethods, SwipeableProps>(\n  function Swipeable(\n    props: SwipeableProps,\n    ref: ForwardedRef<SwipeableMethods>\n  ) {\n    const defaultProps = {\n      friction: 1,\n      overshootFriction: 1,\n      dragOffset: 10,\n      enableTrackpadTwoFingerGesture: false,\n    };\n\n    const {\n      leftThreshold,\n      rightThreshold,\n      enabled,\n      containerStyle,\n      childrenContainerStyle,\n      animationOptions,\n      overshootLeft,\n      overshootRight,\n      testID,\n      children,\n      enableTrackpadTwoFingerGesture = defaultProps.enableTrackpadTwoFingerGesture,\n      dragOffsetFromLeftEdge = defaultProps.dragOffset,\n      dragOffsetFromRightEdge = defaultProps.dragOffset,\n      friction = defaultProps.friction,\n      overshootFriction = defaultProps.overshootFriction,\n      onSwipeableOpenStartDrag,\n      onSwipeableCloseStartDrag,\n      onSwipeableWillOpen,\n      onSwipeableWillClose,\n      onSwipeableOpen,\n      onSwipeableClose,\n      renderLeftActions,\n      renderRightActions,\n      ...remainingProps\n    } = props;\n\n    const rowState = useSharedValue<number>(0);\n\n    const userDrag = useSharedValue<number>(0);\n\n    const appliedTranslation = useSharedValue<number>(0);\n\n    const rowWidth = useSharedValue<number>(0);\n    const leftWidth = useSharedValue<number>(0);\n    const rightWidth = useSharedValue<number>(0);\n\n    const showLeftProgress = useSharedValue<number>(0);\n    const showRightProgress = useSharedValue<number>(0);\n\n    const updateAnimatedEvent = useCallback(() => {\n      'worklet';\n\n      const shouldOvershootLeft = overshootLeft ?? leftWidth.value > 0;\n      const shouldOvershootRight = overshootRight ?? rightWidth.value > 0;\n\n      const startOffset =\n        rowState.value === 1\n          ? leftWidth.value\n          : rowState.value === -1\n            ? -rightWidth.value\n            : 0;\n\n      const offsetDrag = userDrag.value / friction + startOffset;\n\n      appliedTranslation.value = interpolate(\n        offsetDrag,\n        [\n          -rightWidth.value - 1,\n          -rightWidth.value,\n          leftWidth.value,\n          leftWidth.value + 1,\n        ],\n        [\n          -rightWidth.value -\n            (shouldOvershootRight ? 1 / overshootFriction : 0),\n          -rightWidth.value,\n          leftWidth.value,\n          leftWidth.value + (shouldOvershootLeft ? 1 / overshootFriction : 0),\n        ]\n      );\n\n      showLeftProgress.value =\n        leftWidth.value > 0\n          ? interpolate(\n              appliedTranslation.value,\n              [-1, 0, leftWidth.value],\n              [0, 0, 1]\n            )\n          : 0;\n\n      showRightProgress.value =\n        rightWidth.value > 0\n          ? interpolate(\n              appliedTranslation.value,\n              [-rightWidth.value, 0, 1],\n              [1, 0, 0]\n            )\n          : 0;\n    }, [\n      appliedTranslation,\n      friction,\n      leftWidth,\n      overshootFriction,\n      rightWidth,\n      rowState,\n      showLeftProgress,\n      showRightProgress,\n      userDrag,\n      overshootLeft,\n      overshootRight,\n    ]);\n\n    const dispatchImmediateEvents = useCallback(\n      (fromValue: number, toValue: number) => {\n        'worklet';\n        if (toValue > 0 && onSwipeableWillOpen) {\n          runOnJS(onSwipeableWillOpen)(SwipeDirection.RIGHT);\n        } else if (toValue < 0 && onSwipeableWillOpen) {\n          runOnJS(onSwipeableWillOpen)(SwipeDirection.LEFT);\n        } else if (onSwipeableWillClose) {\n          runOnJS(onSwipeableWillClose)(\n            fromValue > 0 ? SwipeDirection.LEFT : SwipeDirection.RIGHT\n          );\n        }\n      },\n      [onSwipeableWillClose, onSwipeableWillOpen]\n    );\n\n    const dispatchEndEvents = useCallback(\n      (fromValue: number, toValue: number) => {\n        'worklet';\n        if (toValue > 0 && onSwipeableOpen) {\n          runOnJS(onSwipeableOpen)(SwipeDirection.RIGHT);\n        } else if (toValue < 0 && onSwipeableOpen) {\n          runOnJS(onSwipeableOpen)(SwipeDirection.LEFT);\n        } else if (onSwipeableClose) {\n          runOnJS(onSwipeableClose)(\n            fromValue > 0 ? SwipeDirection.LEFT : SwipeDirection.RIGHT\n          );\n        }\n      },\n      [onSwipeableClose, onSwipeableOpen]\n    );\n\n    const animateRow: (toValue: number, velocityX?: number) => void =\n      useCallback(\n        (toValue: number, velocityX?: number) => {\n          'worklet';\n\n          const translationSpringConfig = {\n            mass: 2,\n            damping: 1000,\n            stiffness: 700,\n            velocity: velocityX,\n            overshootClamping: true,\n            reduceMotion: ReduceMotion.System,\n            ...animationOptions,\n          };\n\n          const isClosing = toValue === 0;\n          const moveToRight = isClosing ? rowState.value < 0 : toValue > 0;\n\n          const usedWidth = isClosing\n            ? moveToRight\n              ? rightWidth.value\n              : leftWidth.value\n            : moveToRight\n              ? leftWidth.value\n              : rightWidth.value;\n\n          const progressSpringConfig = {\n            ...translationSpringConfig,\n            restDisplacementThreshold: 0.01,\n            restSpeedThreshold: 0.01,\n            velocity:\n              velocityX &&\n              interpolate(velocityX, [-usedWidth, usedWidth], [-1, 1]),\n          };\n\n          const frozenRowState = rowState.value;\n\n          appliedTranslation.value = withSpring(\n            toValue,\n            translationSpringConfig,\n            (isFinished) => {\n              if (isFinished) {\n                dispatchEndEvents(frozenRowState, toValue);\n              }\n            }\n          );\n\n          const progressTarget = toValue === 0 ? 0 : 1 * Math.sign(toValue);\n\n          showLeftProgress.value = withSpring(\n            Math.max(progressTarget, 0),\n            progressSpringConfig\n          );\n\n          showRightProgress.value = withSpring(\n            Math.max(-progressTarget, 0),\n            progressSpringConfig\n          );\n\n          dispatchImmediateEvents(frozenRowState, toValue);\n\n          rowState.value = Math.sign(toValue);\n        },\n        [\n          rowState,\n          animationOptions,\n          appliedTranslation,\n          showLeftProgress,\n          leftWidth,\n          showRightProgress,\n          rightWidth,\n          dispatchImmediateEvents,\n          dispatchEndEvents,\n        ]\n      );\n\n    const leftLayoutRef = useAnimatedRef();\n    const leftWrapperLayoutRef = useAnimatedRef();\n    const rightLayoutRef = useAnimatedRef();\n\n    const updateElementWidths = useCallback(() => {\n      'worklet';\n      const leftLayout = measure(leftLayoutRef);\n      const leftWrapperLayout = measure(leftWrapperLayoutRef);\n      const rightLayout = measure(rightLayoutRef);\n      leftWidth.value =\n        (leftLayout?.pageX ?? 0) - (leftWrapperLayout?.pageX ?? 0);\n\n      rightWidth.value =\n        rowWidth.value -\n        (rightLayout?.pageX ?? rowWidth.value) +\n        (leftWrapperLayout?.pageX ?? 0);\n    }, [\n      leftLayoutRef,\n      leftWrapperLayoutRef,\n      rightLayoutRef,\n      leftWidth,\n      rightWidth,\n      rowWidth.value,\n    ]);\n\n    const swipeableMethods = useMemo<SwipeableMethods>(\n      () => ({\n        close() {\n          'worklet';\n          if (_WORKLET) {\n            animateRow(0);\n            return;\n          }\n          runOnUI(() => {\n            animateRow(0);\n          })();\n        },\n        openLeft() {\n          'worklet';\n          if (_WORKLET) {\n            updateElementWidths();\n            animateRow(leftWidth.value);\n            return;\n          }\n          runOnUI(() => {\n            updateElementWidths();\n            animateRow(leftWidth.value);\n          })();\n        },\n        openRight() {\n          'worklet';\n          if (_WORKLET) {\n            updateElementWidths();\n            animateRow(-rightWidth.value);\n            return;\n          }\n          runOnUI(() => {\n            updateElementWidths();\n            animateRow(-rightWidth.value);\n          })();\n        },\n        reset() {\n          'worklet';\n          userDrag.value = 0;\n          showLeftProgress.value = 0;\n          appliedTranslation.value = 0;\n          rowState.value = 0;\n        },\n      }),\n      [\n        animateRow,\n        updateElementWidths,\n        leftWidth,\n        rightWidth,\n        userDrag,\n        showLeftProgress,\n        appliedTranslation,\n        rowState,\n      ]\n    );\n\n    const onRowLayout = useCallback(\n      ({ nativeEvent }: LayoutChangeEvent) => {\n        rowWidth.value = nativeEvent.layout.width;\n      },\n      [rowWidth]\n    );\n\n    // As stated in `Dimensions.get` docstring, this function should be called on every render\n    // since dimensions may change (e.g. orientation change)\n\n    const leftActionAnimation = useAnimatedStyle(() => {\n      return {\n        opacity: showLeftProgress.value === 0 ? 0 : 1,\n      };\n    });\n\n    const leftElement = useCallback(\n      () => (\n        <Animated.View\n          ref={leftWrapperLayoutRef}\n          style={[styles.leftActions, leftActionAnimation]}>\n          {renderLeftActions?.(\n            showLeftProgress,\n            appliedTranslation,\n            swipeableMethods\n          )}\n          <Animated.View ref={leftLayoutRef} />\n        </Animated.View>\n      ),\n      [\n        appliedTranslation,\n        leftActionAnimation,\n        leftLayoutRef,\n        leftWrapperLayoutRef,\n        renderLeftActions,\n        showLeftProgress,\n        swipeableMethods,\n      ]\n    );\n\n    const rightActionAnimation = useAnimatedStyle(() => {\n      return {\n        opacity: showRightProgress.value === 0 ? 0 : 1,\n      };\n    });\n\n    const rightElement = useCallback(\n      () => (\n        <Animated.View style={[styles.rightActions, rightActionAnimation]}>\n          {renderRightActions?.(\n            showRightProgress,\n            appliedTranslation,\n            swipeableMethods\n          )}\n          <Animated.View ref={rightLayoutRef} />\n        </Animated.View>\n      ),\n      [\n        appliedTranslation,\n        renderRightActions,\n        rightActionAnimation,\n        rightLayoutRef,\n        showRightProgress,\n        swipeableMethods,\n      ]\n    );\n\n    const handleRelease = useCallback(\n      (event: GestureStateChangeEvent<PanGestureHandlerEventPayload>) => {\n        'worklet';\n        const { velocityX } = event;\n        userDrag.value = event.translationX;\n\n        const leftThresholdProp = leftThreshold ?? leftWidth.value / 2;\n        const rightThresholdProp = rightThreshold ?? rightWidth.value / 2;\n\n        const translationX =\n          (userDrag.value + DRAG_TOSS * velocityX) / friction;\n\n        let toValue = 0;\n\n        if (rowState.value === 0) {\n          if (translationX > leftThresholdProp) {\n            toValue = leftWidth.value;\n          } else if (translationX < -rightThresholdProp) {\n            toValue = -rightWidth.value;\n          }\n        } else if (rowState.value === 1) {\n          // Swiped to left\n          if (translationX > -leftThresholdProp) {\n            toValue = leftWidth.value;\n          }\n        } else {\n          // Swiped to right\n          if (translationX < rightThresholdProp) {\n            toValue = -rightWidth.value;\n          }\n        }\n\n        animateRow(toValue, velocityX / friction);\n      },\n      [\n        animateRow,\n        friction,\n        leftThreshold,\n        leftWidth,\n        rightThreshold,\n        rightWidth,\n        rowState,\n        userDrag,\n      ]\n    );\n\n    const close = useCallback(() => {\n      'worklet';\n      animateRow(0);\n    }, [animateRow]);\n\n    const dragStarted = useSharedValue<boolean>(false);\n\n    const tapGesture = useMemo(\n      () =>\n        Gesture.Tap()\n          .shouldCancelWhenOutside(true)\n          .onStart(() => {\n            if (rowState.value !== 0) {\n              close();\n            }\n          }),\n      [close, rowState]\n    );\n\n    const panGesture = useMemo(\n      () =>\n        Gesture.Pan()\n          .enabled(enabled !== false)\n          .enableTrackpadTwoFingerGesture(enableTrackpadTwoFingerGesture)\n          .activeOffsetX([-dragOffsetFromRightEdge, dragOffsetFromLeftEdge])\n          .onStart(updateElementWidths)\n          .onUpdate(\n            (event: GestureUpdateEvent<PanGestureHandlerEventPayload>) => {\n              userDrag.value = event.translationX;\n\n              const direction =\n                rowState.value === -1\n                  ? SwipeDirection.RIGHT\n                  : rowState.value === 1\n                    ? SwipeDirection.LEFT\n                    : event.translationX > 0\n                      ? SwipeDirection.RIGHT\n                      : SwipeDirection.LEFT;\n\n              if (!dragStarted.value) {\n                dragStarted.value = true;\n                if (rowState.value === 0 && onSwipeableOpenStartDrag) {\n                  runOnJS(onSwipeableOpenStartDrag)(direction);\n                } else if (onSwipeableCloseStartDrag) {\n                  runOnJS(onSwipeableCloseStartDrag)(direction);\n                }\n              }\n\n              updateAnimatedEvent();\n            }\n          )\n          .onEnd(\n            (event: GestureStateChangeEvent<PanGestureHandlerEventPayload>) => {\n              handleRelease(event);\n            }\n          )\n          .onFinalize(() => {\n            dragStarted.value = false;\n          }),\n      [\n        dragOffsetFromLeftEdge,\n        dragOffsetFromRightEdge,\n        dragStarted,\n        enableTrackpadTwoFingerGesture,\n        enabled,\n        handleRelease,\n        onSwipeableCloseStartDrag,\n        onSwipeableOpenStartDrag,\n        rowState,\n        updateAnimatedEvent,\n        updateElementWidths,\n        userDrag,\n      ]\n    );\n\n    useImperativeHandle(ref, () => swipeableMethods, [swipeableMethods]);\n\n    const animatedStyle = useAnimatedStyle(\n      () => ({\n        transform: [{ translateX: appliedTranslation.value }],\n        pointerEvents: rowState.value === 0 ? 'auto' : 'box-only',\n      }),\n      [appliedTranslation, rowState]\n    );\n\n    const swipeableComponent = (\n      <GestureDetector gesture={panGesture} touchAction=\"pan-y\">\n        <Animated.View\n          {...remainingProps}\n          onLayout={onRowLayout}\n          style={[styles.container, containerStyle]}>\n          {leftElement()}\n          {rightElement()}\n          <GestureDetector gesture={tapGesture} touchAction=\"pan-y\">\n            <Animated.View style={[animatedStyle, childrenContainerStyle]}>\n              {children}\n            </Animated.View>\n          </GestureDetector>\n        </Animated.View>\n      </GestureDetector>\n    );\n\n    return testID ? (\n      <View testID={testID}>{swipeableComponent}</View>\n    ) : (\n      swipeableComponent\n    );\n  }\n);\n\nexport default Swipeable;\nexport type SwipeableRef = ForwardedRef<SwipeableMethods>;\n\nconst styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden',\n  },\n  leftActions: {\n    ...StyleSheet.absoluteFillObject,\n    flexDirection: I18nManager.isRTL ? 'row-reverse' : 'row',\n    overflow: 'hidden',\n  },\n  rightActions: {\n    ...StyleSheet.absoluteFillObject,\n    flexDirection: I18nManager.isRTL ? 'row' : 'row-reverse',\n    overflow: 'hidden',\n  },\n});\n"]}